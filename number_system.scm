(define inc (lambda (n) (cons 'z n)))
(define dec (lambda (n) (cdr n)))

(define greater? (lambda (a b)
                  (cond ((and (null? a) (null? b)) #f)
                        ((null? a) #f)
                        ((null? b) #t)
                        (else (greater? (dec a) (dec b))))))

(define convnumb (lambda (n)
                  (cond ((greater? n (mult '(z z z z z z z z z) '(z z z z z z z z z z z))) 
                          (cons 'H (convnumb (sub n (mult '(z z z z z z z z z z) '(z z z z z z z z z z))))))
                        ((greater? n '(z z z z z z z z z)) 
                          (cons 'T (convnumb (sub n '(z z z z z z z z z z)))))
                        ((greater? n '(z z z z)) 
                          (cons 'F (convnumb (sub n '(z z z z z)))))
                        (else n))))

(define add2 (lambda (a b)
             (cond ((null? b) a)
                   (else (add2 (inc a) (dec b))))))
(define mult2 (lambda (a b)
              (cond ((null? b) '( ))
                    (else (add2 a (mult a (dec b)))))))
(define expt2 (lambda (a b)
              (cond ((null? (dec b)) a)
                    (else (expt2 (mult a a) (dec b))))))
(define sub2 (lambda (a b) 
             (cond ((null? b) a)
                   (else (sub2 (dec a) (dec b))))))
(define div2 (lambda (a b)
             (cond ((not(greater? a b)) '( ))
                   (else (inc (div2 (sub a b) b))))))

(define add (lambda (a b) (convnumb (add2 a b))))
(define mult (lambda (a b) (convnumb (mult2 a b))))
(define expt (lambda (a b) (convnumb (expt2 a b))))
(define sub (lambda (a b) (convnumb (sub2 a b))))
(define div (lambda (a b) (convnumb (div2 a b))))

(define H (mult '(z z z z z z z z z z) '(z z z z z z z z z z)))
(define T '(z z z z z z z z z z))
(define F '(z z z z z))